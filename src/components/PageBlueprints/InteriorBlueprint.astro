---
import type {
  PagePayload,
  Hero,
  Grid,
  Emphasis,
  Presentation,
  RichContent,
  Quote,
  FAQ,
  Index,
  LinkCTA,
  TeamSection as TeamSectionType,
  CTA,
  PageNavigation,
} from "../../types/index";
import InnerHeroSection from "../PageSections/InnerHero.astro";
import InnerGridSection from "../PageSections/InnerGrid.astro";
import EmphasisSection from "../PageSections/Emphasis.astro";
import PresentationSection from "../PageSections/Presentation.astro";
import IndexSection from "../PageSections/IndexSection.astro";
import TeamSection from "../PageSections/TeamSection.astro";
import SponsorsSection from "../PageSections/Sponsors.astro";
import FAQSection from "../PageSections/FAQSection.astro";
import QuoteSection from "../PageSections/Quote.astro";
import LinkCTASection from "../PageSections/LinkCTA.astro";
import CallToActionSection from "../PageSections/CallToAction.astro";
import RichContentSection from "../PageSections/RichContent_Section.astro";
import buildPageNav from "../../utils/buildPageNav";
import type { PortableTextBlock } from "sanity";

type Props = {
  page: PagePayload;
};

const { page } = Astro.props;

const pageNavigation: PageNavigation = buildPageNav(page.content);
---

<Fragment>
  {
    page.content.map((section, idx) => {
      switch (section.type) {
        case "hero":
          return (
            <InnerHeroSection
              content={section as Hero}
              navigation={pageNavigation}
            />
          );
        case "grid":
          return <InnerGridSection content={section as Grid} />;
        case "sponsors":
          return <SponsorsSection content={section as Grid} />;
        case "presentation":
          return <PresentationSection content={section as Presentation} />;
        case "emphasis":
          return <EmphasisSection content={section as Emphasis} />;
        case "quote":
          return <QuoteSection content={section as Quote} />;
        case "richContent":
          return <RichContentSection content={section as RichContent} />;
        case "faq":
          return <FAQSection content={section as FAQ} />;
        case "index":
          return <IndexSection content={section as Index} />;
        case "teamSection":
          return <TeamSection content={section as TeamSectionType} />;
        case "linkCTA":
          return <LinkCTASection content={section as LinkCTA} />;
        case "cta":
          return <CallToActionSection content={section as CTA} />;
        default:
          return null;
      }
    })
  }
</Fragment>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  let mm = gsap.matchMedia();

  mm.add(
    {
      reduceMotion: "(prefers-reduced-motion: reduce)",
      isDesktop: "(min-width: 769px)",
      isMobile: "(max-width: 768px)",
    },
    (context) => {
      console.log(context.conditions);
      let { reduceMotion, isDesktop, isMobile } =
        context.conditions as gsap.Conditions;

      const defaults = {
        ease: "power1.out",
        duration: 1,
      };

      gsap.to(".hero img", {
        scrollTrigger: ".hero",
        scale: reduceMotion ? 1 : 1.06,
        duration: defaults.duration + 2,
        ease: defaults.ease,
      });

      gsap.from(".hero .text header p, .hero .text header h1, .hero .text p", {
        scrollTrigger: ".hero",
        opacity: 0,
        y: reduceMotion ? 0 : 16,
        stagger: reduceMotion ? 0 : 0.4,
        duration: defaults.duration,
        ease: defaults.ease,
      });

      gsap.from(".presentation-section img", {
        scrollTrigger: ".presentation-section .text",
        opacity: 0,
        // scale: reduceMotion ? 1 : 0.9,
        y: reduceMotion ? 0 : 32,
        duration: defaults.duration + 0.5,
        ease: defaults.ease,
      });

      if (document.querySelector(".faq-section")) {
        gsap.from(".faq-section .bird", {
          scrollTrigger: ".faq-section",
          opacity: 0,
          // scale: reduceMotion ? 1 : 0.98,
          rotate: reduceMotion ? 0 : 16,
          y: reduceMotion ? 0 : 4,
          duration: reduceMotion ? 0 : defaults.duration + 1,
          ease: defaults.ease,
        });

        gsap.from(".faq-section .lines > *", {
          scrollTrigger: ".faq-section",
          opacity: 0,
          y: reduceMotion ? 0 : -100,
          stagger: reduceMotion ? 0 : 0.2,
          duration: defaults.duration,
          ease: defaults.ease,
        });
      }

      if (document.querySelector(".columns-section")) {
        gsap.from(".columns-section article", {
          scrollTrigger: ".columns-section",
          opacity: 0,
          y: reduceMotion ? 0 : 16,
          stagger: reduceMotion ? 0 : 0.2,
          delay: reduceMotion ? 0 : 0.3,
          duration: defaults.duration,
          ease: defaults.ease,
        });
      }

      if (document.querySelector(".index-section")) {
        gsap.from(".index-section article", {
          scrollTrigger: ".index-section article",
          y: reduceMotion ? 0 : 16,
          opacity: 0,
          duration: defaults.duration,
          stagger: reduceMotion ? 0 : 0.2,
          ease: defaults.ease,
        });
      }

      if (document.querySelector(".team-section")) {
        gsap.from(".team-section .section article", {
          scrollTrigger: ".team-section .section article",
          y: reduceMotion ? 0 : 16,
          opacity: 0,
          duration: defaults.duration,
          stagger: reduceMotion ? 0 : 0.2,
          ease: defaults.ease,
        });
      }

      if (document.querySelector(".sponsors-section")) {
        gsap.from(".sponsors-section img", {
          scrollTrigger: ".sponsors-section",
          opacity: 0,
          y: reduceMotion ? 0 : 16,
          stagger: reduceMotion ? 0 : 0.2,
          delay: reduceMotion ? 0 : 0.3,
          duration: defaults.duration,
          ease: defaults.ease,
        });
      }
    }
  );
</script>
