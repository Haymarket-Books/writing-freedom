---
import Layout from "../../layouts/Layout.astro";
import InteriorBlueprint from "../../components/PageBlueprints/InteriorBlueprint.astro";
import IndexBlueprint from "../../components/PageBlueprints/IndexBlueprint.astro";
import ContactBlueprint from "../../components/PageBlueprints/ContactBlueprint.astro";
import PersonCard from "../../components/PersonCard.astro";
import FellowsFilterYear from "../../components/FellowsFilterYear.astro";
import { sanityClient } from "sanity:client";
import {
  pageQuery,
  fellowshipYearsIndexQuery,
  fellowCategoriesQuery,
} from "../../lib/sanity.queries";
import type {
  PagePayload,
  Fellow,
  FellowshipYear,
  PageMetadata,
  Category,
} from "../../types";
import FellowsFilters from "../../components/FellowsFilters.astro";
import generatePageMetadata from "../../utils/generatePageMetadata";

export async function getStaticPaths() {
  const years = await sanityClient.fetch<FellowshipYear[]>(
    fellowshipYearsIndexQuery
  );
  const fellowCategories = await sanityClient.fetch<Category[]>(
    fellowCategoriesQuery
  );
  // const pages = await sanityClient.fetch<PagePayload[]>(pageQuery, {
  //   page: "page"
  // });

  return years.map((entry) => {
    return {
      params: { year: entry.year },
      props: {
        page: entry,
        fellowshipYears: years,
        filterCategories: fellowCategories,
      },
    };
  });
}

// const fellows = await sanityClient.fetch<Fellow[]>(fellowsAllQuery);

type Props = {
  page?: FellowshipYear;
  fellowshipYears?: FellowshipYear[];
  filterCategories?: Category[];
};

const { page, fellowshipYears, filterCategories } = Astro.props;

const meta: PageMetadata = {
  seo: {
    title: `${page?.year} Fellows`,
    description: `Meet the Writing Freedom fellows for ${page?.year}.`,
  },
  openGraph: {
    title: `${page?.year} Fellows`,
    image: undefined,
    description: `Meet the Writing Freedom fellows for ${page?.year}.`,
  },
};

const path = Astro.url.pathname;

// const page = pages.filter((page) => page.blueprint === "index");
---

<Layout meta={generatePageMetadata(meta, `${page?.year} Fellows`, path)}>
  <main slot="content">
    <div class="content-wrapper flow">
      <h1 class="with-mark">{page?.year} Fellows</h1>
      <FellowsFilterYear />
      <section class="flow">
        <h2 class="sr-only">Fellows</h2>
        <div class="index-section | fellows-grid | responsive-grid">
          {
            page?.fellows?.map((fellow) => {
              return <PersonCard person={fellow} />;
            })
          }
        </div>
      </section>
      <!-- <fellow-filter class="flow">
        <FellowsFilters years={fellowshipYears} categories={filterCategories} />
        <section class="flow">
          <h2>All Fellows</h2>
          <div class="fellows-grid | responsive-grid">
            {
              page?.fellows?.map((fellow) => {
                return <PersonCard person={fellow} />;
              })
            }
          </div>
        </section>
      </fellow-filter> -->
    </div>

    <style>
      .content-wrapper {
        margin-block: var(--section-spacer);

        &.flow {
          --flow-space: 3rem;
        }
      }

      h2 {
        font-size: var(--step-2);
      }

      section {
        margin-block: var(--space-m);

        &.flow {
          --flow-space: 1.5rem;
        }
      }

      .responsive-grid {
        /* --grid-gap: 2rem; */
        --item-min-width: 16rem;
        /* --item-max-width: 18rem; */
        grid-row-gap: 4rem;
        grid-column-gap: 2rem;
        /* --item-min-width: 12rem; 
        --item-max-width: 14rem; */
      }
    </style>
  </main>
</Layout>

<!-- <script src="../../scripts/components/fellow-filter.js"></script> -->

<!-- <script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  let mm = gsap.matchMedia();

  mm.add(
    {
      reduceMotion: "(prefers-reduced-motion: reduce)",
      isDesktop: "(min-width: 769px)",
      isMobile: "(max-width: 768px)",
    },
    (context) => {
      console.log(context.conditions);
      let { reduceMotion, isDesktop, isMobile } =
        context.conditions as gsap.Conditions;

      const defaults = {
        ease: "power1.out",
        duration: 1,
      };

      gsap.from(".index-section article", {
        scrollTrigger: ".index-section article",
        y: reduceMotion ? 0 : 16,
        opacity: 0,
        duration: defaults.duration,
        stagger: reduceMotion ? 0 : 0.2,
        ease: defaults.ease,
      });
    },
  );
</script> -->
