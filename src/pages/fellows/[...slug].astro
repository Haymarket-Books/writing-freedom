---
import Layout from "../../layouts/Layout.astro";
import { Image } from "astro:assets";
import RichContent from "../../components/RichContent.astro";
import IndexBlueprint from "../../components/PageBlueprints/IndexBlueprint.astro";
import ButtonLink from "../../components/ButtonLink.astro";
import AudioControls from "../../components/AudioControls.astro";
import BackgroundIllustration from "../../components/BackgroundIllustration.astro";
import ShareLink from "../../components/Svelte/ShareLink.svelte";
import { sanityClient } from "sanity:client";
import { fellowsDetailQuery } from "../../lib/sanity.queries";
import type { Fellow, PageMetadata } from "../../types";
import urlFor from "../../lib/sanity.urlForImage";
import joinNames from "../../utils/joinNames";
import buildFellowHref from "../../utils/buildFellowHref";
import "../../styles/rich-content.css";
import generatePageMetadata from "../../utils/generatePageMetadata";
import SocialLinks from "../../components/SocialLinks.astro";

export async function getStaticPaths() {
  const fellows = await sanityClient.fetch<Fellow[]>(fellowsDetailQuery);
  const numberOfFellows = fellows.length;

  return fellows.map((fellow, index) => {
    return {
      params: { slug: `${fellow.fellowshipYear?.slug}/${fellow?.slug}` },
      props: {
        fellow,
        // If current fellow is last
        nextFellow:
          index + 1 === numberOfFellows ? undefined : fellows[index + 1],
        // If current fellow is first
        prevFellow: index === 0 ? undefined : fellows[index - 1],
      },
    };
  });
}

type Props = {
  fellow?: Fellow;
  prevFellow?: Fellow;
  nextFellow?: Fellow;
};

const { fellow, prevFellow, nextFellow } = Astro.props;

const meta: PageMetadata = {
  seo: {
    title: `${joinNames(fellow?.name)} | ${
      fellow?.fellowshipYear?.year
    } Fellows`,
    description: `Biography for ${
      fellow?.fellowshipYear?.year
    } fellow ${joinNames(fellow?.name)}.`,
  },
  openGraph: {
    title: `${joinNames(fellow?.name)} | ${
      fellow?.fellowshipYear?.year
    } Fellows`,
    image: fellow?.image,
    description: `Biography for ${
      fellow?.fellowshipYear?.year
    } fellow ${joinNames(fellow?.name)}.`,
  },
};

const path = Astro.url.pathname;

// const url = Astro.url;
// const urlParts = url.pathname.split('/');
---

<Layout
  meta={generatePageMetadata(
    meta,
    `${joinNames(fellow?.name)} | Fellows`,
    path,
  )}
>
  <main slot="content">
    <div class="breadcrumb | cluster">
      <a href="/fellows">Fellows</a>
      <span>/</span>
      <a href={`/fellows/${fellow?.fellowshipYear?.slug}`}
        >{fellow?.fellowshipYear?.year}</a
      >
      <!-- <a href={`/fellows?year=${fellow?.fellowshipYear}`}
        >{fellow?.fellowshipYear}</a
      > -->
      <span>/</span>
      <p>{joinNames(fellow?.name)}</p>
    </div>
    <article>
      <section class="content-wrapper">
        <div class="intro-grid">
          <figure>
            <Image
              class="headshot lqip-preview"
              src={urlFor(fellow?.image!)
                .width(400)
                .height(500)
                .auto("format")
                .url()}
              width={400}
              height={500}
              alt={fellow?.image?.alt ||
                `Headshot for ${joinNames(fellow?.name)}`}
              format="webp"
            />
            {
              fellow?.image?.attribution && (
                <figcaption>{fellow.image.attribution}</figcaption>
              )
            }
          </figure>
          <div class="intro | flow">
            <h1 class="with-mark balanced">{joinNames(fellow?.name)}</h1>
            <!-- prettier-ignore -->
            <p class="small-title leading-normal">{fellow?.categories?.map((category) => category.name).join(", ")}</p>
            <p>
              <a href={`/fellows/${fellow?.fellowshipYear?.slug}`}
                >{`${fellow?.fellowshipYear?.year} Fellow`}</a
              >
            </p>
          </div>
        </div>
      </section>
      <img class="radial-blur" src="/radial-blur.svg" alt="" />
      <section class="bio">
        <div class="content-wrapper grid">
          <div class="background | flow">
            <h2 class="sr-only">Biography</h2>
            <div class="rich-content">
              <RichContent content={fellow?.content} />
            </div>
          </div>
          <div class="sidebar | flow">
            <div class="box | flow">
              {
                fellow?.media?.file && (
                  <>
                    <div class="media | flow">
                      <div class="cluster">
                        <>
                          <i class="fa-regular fa-headphones" />
                          <h2 class="small-title">Listen</h2>
                        </>
                      </div>
                      <AudioControls content={fellow} />
                    </div>
                    <ShareLink
                      url={fellow?.media?.file?.url}
                      title={`${joinNames(fellow?.name)} reading`}
                      client:load
                    />
                  </>
                )
              }
              {
                fellow?.websiteLink && (
                  <div class="web-link | flow">
                    <div class="cluster">
                      <i class="fa-regular fa-link" />
                      <h2 class="small-title">Website</h2>
                    </div>
                    <a href={fellow?.websiteLink} target="_blank">
                      {fellow?.websiteLink}
                    </a>
                  </div>
                )
              }
              {
                fellow?.socialLinks?.length && (
                  <div class="follow | flow">
                    <div class="cluster">
                      <i class="fa-regular fa-share-from-square" />
                      <h2 class="small-title">Follow</h2>
                    </div>
                    <SocialLinks content={fellow?.socialLinks} />
                  </div>
                )
              }
            </div>
            <!-- <div class="selected-work | flow">
              <h2 class="small-title">Selected Work</h2>
              <div class="rich-content">
                <ul role="list">
                  {
                    fellow?.selectedWorks?.map((work) => (
                      <li>{`${work.title}, ${work.year}`}</li>
                    ))
                  }
                </ul>
              </div>
            </div> -->
          </div>
        </div>
        <BackgroundIllustration xPosition={5} />
      </section>
    </article>
    <div class="fellow-nav | content-wrapper">
      {
        prevFellow && (
          <div class="prev flow">
            <div class="small-title">Previous Fellow</div>
            <a href={buildFellowHref(prevFellow)} rel="prev">
              {joinNames(prevFellow.name)}
            </a>
          </div>
        )
      }
      <div class="return">
        <ButtonLink
          linkObject={{
            name: "Back to All Fellows",
            href: { slug: "fellows" },
          }}
        />
      </div>
      {
        nextFellow && (
          <div class="next flow">
            <div class="small-title">Next Fellow</div>
            <a href={buildFellowHref(nextFellow)} rel="next">
              {joinNames(nextFellow.name)}
            </a>
          </div>
        )
      }
    </div>
  </main>
</Layout>

<style>
  main {
    position: relative;
    overflow: hidden;
    padding-block-start: calc(var(--section-spacer) * 0.25);
    margin-block-end: var(--section-spacer);
  }

  .breadcrumb {
    font-size: var(--step--1);
    padding-inline: var(--gutter, 1rem);

    &.cluster {
      --cluster-space: 0.5rem;
    }

    & span {
      color: var(--color-accent-base);
    }

    & p {
      opacity: var(--text-opacity-shade);
    }
  }

  article {
    margin-block-start: calc(var(--section-spacer) * 0.5);
  }

  h1 {
    font-size: var(--step-3);
    color: var(--color-text-heading);
  }

  .intro-grid {
    grid-template-columns: minmax(auto, 22rem) auto;
    gap: var(--space-2xl);
    width: fit-content;
    margin-inline: auto;
    display: grid;
    align-items: center;
    position: relative;
    z-index: 2;
  }

  .radial-blur {
    position: absolute;
    z-index: -2;
    top: -4%;
    left: 6%;
    opacity: 0.1;
    /* top: -15%;
    right: -25%;
    opacity: 0.1; */
  }

  .headshot {
    aspect-ratio: var(--presentation-image-ratio);
    object-fit: cover;
    height: 100%;
    border-radius: var(--rounded-corners-small);
    justify-self: end;

    & + figcaption {
      position: absolute;
      font-style: italic;
      font-size: var(--step--1);
      padding-block-start: var(--space-2xs);
    }
  }

  .intro {
    position: relative;
    top: -1.5rem;
    width: min(100vw, 28rem);

    & .small-title {
      opacity: var(--text-opacity-shade);
    }

    /* & .cluster {
      --cluster-space: 0.5rem;

      & span:not(.spacer) {
        opacity: var(--text-opacity-shade);
      }

      & .spacer {
        color: var(--color-primary-base);
      }
    } */
  }

  .bio {
    margin-block-start: calc((var(--section-spacer) * 0.5) * -1);
    margin-block-end: var(--section-spacer);
    padding-block: calc(var(--section-spacer) + 1rem);
    background-color: var(--color-primary-light-background);
    position: relative;

    & .grid {
      display: grid;
      /* grid-template-columns: minmax(auto, 38rem) minmax(auto, 20rem);
      width: fit-content;
      margin-inline: auto;
    */
      grid-template-columns: 1fr 0.33fr;
      gap: var(--space-2xl);
    }

    & .small-title {
      color: var(--color-primary-base);
    }

    & .background {
      & .rich-content {
        font-size: var(--step-1);
        text-wrap: pretty;
        max-width: 59ch;
      }
    }

    /* & .selected-work {
    } */
  }

  .sidebar {
    &.flow {
      gap: var(--space-l);
    }

    & .box {
      background: var(--color-primary-dark);
      border-radius: var(--rounded-corners-small);
      color: var(--color-primary-light);
      padding: 1.5rem;

      &.flow {
        gap: var(--space-l);
      }

      & > .flow {
        gap: var(--space-2xs);
      }

      & .cluster {
        --cluster-space: 0.75rem;
      }

      & :is(svg, .small-title) {
        color: var(--color-accent-light);
      }

      & .small-title {
        line-height: 1;
      }

      & svg {
        position: relative;
        top: -2px;
      }
    }
  }

  .fellow-nav {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    align-items: center;
    gap: var(--space-m);

    & .small-title {
      color: var(--color-primary-base);
    }

    & :is(.prev, .next) {
      &.flow {
        gap: 0.5rem;
      }
    }

    & .next {
      text-align: right;
      align-items: flex-end;
    }

    & .return {
      grid-column: 2/2;
      justify-self: center;
    }

    & a {
      font-family: var(--font-heading);
      font-weight: var(--font-heading-weight);
      font-size: var(--step-1);
      text-decoration-color: color-mix(
        in srgb,
        var(--color-primary-base),
        white 70%
      );
      text-decoration-thickness: 2px;
      display: inline-block;
      width: fit-content;
      transition: all 0.2s ease;

      &:hover {
        color: var(--color-primary-base);
        text-decoration-color: var(--color-primary-base);
      }
    }
  }

  @media (max-width: 999px) {
    .intro-grid {
      margin-inline-start: 0;
    }

    .bio {
      & .grid {
        grid-template-columns: 1fr 300px;
        gap: var(--space-l);
      }
    }
  }

  @media (max-width: 849px) {
    .intro {
      width: auto;
    }

    .bio {
      & .grid {
        grid-template-columns: 1fr;
        gap: var(--space-xl);
      }
    }
  }

  @media (max-width: 768px) {
    .intro-grid {
      gap: var(--space-m);
    }

    .fellow-nav {
      grid-template-columns: 1fr;
      gap: var(--space-xl);

      & :is(.prev, .next) {
        text-align: center;
        align-items: center;
      }

      & .return {
        grid-column: 1/1;
        order: -1;
      }
    }
  }

  @media (max-width: 640px) {
    .intro-grid {
      grid-template-columns: 1fr;
      width: 100%;
      margin-block-start: var(--space-3xl);
      gap: var(--space-l);
    }

    .intro {
      top: 0;
      order: -1;
    }

    .radial-blur {
      top: 1%;
      left: -25%;
    }

    .bio {
      & .background {
        & .rich-content {
          font-size: var(--step-0);
          text-wrap: wrap;
          max-width: none;
          hyphens: auto;
        }
      }
    }
  }
</style>
